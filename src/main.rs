// Bevy code commonly triggers these lints and they may be important signals
// about code quality. They are sometimes hard to avoid though, and the CI
// workflow treats them as errors, so this allows them throughout the project.
// Feel free to delete this line.
#![allow(clippy::too_many_arguments, clippy::type_complexity)]
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]
use bevy::prelude::*;
use bevy_asset_loader::prelude::*;
use bevy_sprite3d::{Sprite3d, Sprite3dParams, Sprite3dPlugin};
use rand::{prelude::SliceRandom, Rng};

mod consts;
mod debug;

#[derive(Resource, AssetCollection)]
struct ImageAssets {
    #[asset(path = "colored-transparent_packed.png")]
    image: Handle<Image>,
    #[asset(texture_atlas(tile_size_x = 16., tile_size_y = 16., columns = 49, rows = 22,))]
    layout: Handle<TextureAtlasLayout>,
}

/// Tag entity to make it always face the camera
#[derive(Component)]
struct FaceCamera;

#[derive(Clone, Eq, PartialEq, Debug, Hash, Default, States)]
enum MyStates {
    #[default]
    AssetLoading,
    Next,
}

fn main() {
    #[cfg(target_arch = "wasm32")]
    console_error_panic_hook::set_once();
    App::new()
        .add_plugins(DefaultPlugins.set(ImagePlugin::default_nearest()))
        .add_plugins((Sprite3dPlugin, debug::DebugPlugin))
        .add_systems(OnEnter(MyStates::Next), generate_world)
        .add_systems(Startup, setup)
        .insert_resource(ClearColor(Color::rgb(0.09, 0.09, 0.13)))
        .insert_resource(Msaa::Off)
        .init_state::<MyStates>()
        .add_systems(Update, face_camera)
        .add_loading_state(
            LoadingState::new(MyStates::AssetLoading)
                .continue_to_state(MyStates::Next)
                .load_collection::<ImageAssets>(),
        )
        .run();
}

fn face_camera(
    cam_query: Query<&Transform, With<Camera>>,
    mut query: Query<&mut Transform, (With<FaceCamera>, Without<Camera>)>,
) {
    let cam_transform = cam_query.single();
    for mut transform in query.iter_mut() {
        let mut delta = cam_transform.translation - transform.translation;
        delta.y = 0.0;
        delta += transform.translation;
        transform.look_at(delta, Vec3::Y);
    }
}

fn setup(
    mut commands: Commands,
    // mut meshes: ResMut<Assets<Mesh>>,
    // mut materials: ResMut<Assets<StandardMaterial>>,
) {
    // circular base
    // commands.spawn(PbrBundle {
    //     mesh: meshes.add(Circle::new(4.0)),
    //     material: materials.add(Color::WHITE),
    //     transform: Transform::from_rotation(Quat::from_rotation_x(-std::f32::consts::FRAC_PI_2)),
    //     ..default()
    // });

    // light
    commands.spawn(PointLightBundle {
        point_light: PointLight {
            shadows_enabled: true,
            ..default()
        },
        transform: Transform::from_xyz(4.0, 8.0, 4.0),
        ..default()
    });
    // camera
    commands.spawn(Camera3dBundle {
        transform: Transform::from_xyz(-2.5, 4.5, 9.0).looking_at(Vec3::ZERO, Vec3::Y),
        ..default()
    });
}

fn generate_world(
    mut commands: Commands,assets: Res<ImageAssets>,
    mut sprite_params: Sprite3dParams,
) {
    
    let options_f = [(7,0), (7,0), (7,0), (9,1), (9,2), (9,3), (9,4)];
    let f = || { options_f.choose(&mut rand::thread_rng()).unwrap().clone() };

    let options_d = [(9,9), (9,10), (9,11)]; // random darker floor tile
    let d = || { options_d.choose(&mut rand::thread_rng()).unwrap().clone() };

    let options_l = [(7,5), (7,6), (7,7)]; // left wall tile
    let l = || { options_l.choose(&mut rand::thread_rng()).unwrap().clone() };
    let options_t = [(7,8), (7,9), (7,10)]; // top wall tile
    let t = || { options_t.choose(&mut rand::thread_rng()).unwrap().clone() };
    let options_b = [(7,11), (7,12), (7,13)]; // bottom wall tile
    let b = || { options_b.choose(&mut rand::thread_rng()).unwrap().clone() };
    let options_r = [(7,14), (7,15), (7,16)]; // right wall tile
    let r = || { options_r.choose(&mut rand::thread_rng()).unwrap().clone() };

    let tl = || { (7,1) }; // top left corner
    let tr = || { (7,2) }; // top right corner
    let bl = || { (7,3) }; // bottom left corner
    let br = || { (7,4) }; // bottom right corner

    let options_tb = [(7,21), (7,22)]; // top and bottom wall tile
    let tb = || { options_tb.choose(&mut rand::thread_rng()).unwrap().clone() };

    // in reality, you'd probably want to import a map generated by an
    // external tool, or maybe proc-gen it yourself. For this example, a
    // 2d array should suffice.

    let mut map = vec![
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), tl(),  t(),   d(),   d(),   d(),   t(),   tr() ],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), l(),   f(),   f(),   f(),   f(),   f(),   r()  ],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), d(),   f(),   d(),   d(),   d(),   f(),   d()  ],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), d(),   f(),   d(),   d(),   d(),   f(),   d()  ],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), d(),   f(),   d(),   d(),   d(),   f(),   d()  ],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), l(),   f(),   f(),   f(),   f(),   f(),   r()  ],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), bl(),  b(), (8,21),  d(), (8,22),  b(),   br() ],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), (0,0), (0,0), l(),   f(),   r(),   (0,0), (0,0)],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), (0,0), (0,0), l(),   d(),   r(),   (0,0), (0,0)],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), (0,0), tl(), (8,19), f(),  (8,20), tr(),  (0,0)],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), (0,0), l(),   f(),   d(),   f(),   r(),   (0,0)],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), (0,0), l(),   f(),   f(),   f(),   r(),   (0,0)],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), (0,0), l(),   f(),   d(),   f(),   r(),   (0,0)],
        vec![(0,0), (0,0), (0,0), (0,0), (0,0), (0,0), l(),   f(),   f(),   f(),   r(),   (0,0)],
        vec![tl(),  t(),    tr(), (0,0), (0,0), (0,0), l(),   f(),   f(),   f(),   r(),   (0,0)],
        vec![l(),   f(),  (8,25),  tb(),  tb(),  tb(), (8,24),f(),   f(),   f(),   r(),   (0,0)],
        vec![bl(),  b(),    br(), (0,0), (0,0), (0,0), bl(),  b(),   b(),   b(),   br(),  (0,0)],
    ];
    
    // add zero padding to the map
    map.insert(0, vec![(0,0); map[0].len()]);
    map.push(vec![(0,0); map[0].len()]);
    for row in map.iter_mut() {
        row.insert(0, (0,0));
        row.push((0,0));
    }

    // might be nice to add built-in support for sprite-merging for tilemaps...
    // though since all the meshes and materials are already cached and reused,
    // I wonder how much of a speedup that'd actually be. Food for thought.

    for y in 0..map.len() {
        for x in 0..map[y].len() {
            let index = map[y][x].0 * 30 + map[y][x].1;
            let (x, y) = (x as f32 - map[y].len() as f32 / 2.0, y as f32 - map.len() as f32 / 2.0);
            if index == 0 { continue; }

            let atlas = TextureAtlas {
                layout: assets.layout.clone(),
                index: index as usize,
            };

            commands.spawn(Sprite3d {
                    image: assets.image.clone(),
                    pixels_per_metre: 16.,
                    double_sided: false,
                    transform: Transform::from_xyz(x, 0.0, y).with_rotation(Quat::from_rotation_x(-std::f32::consts::PI / 2.0)),
                    ..default()
            }.bundle_with_atlas(&mut sprite_params, atlas));
        }
    }

    // --------------------------- add some walls -------------------------

    // first horizontally, then vertically, scan along the map. If we find
    // a point transitioning from (0,0) to something else, add a wall there.

    let mut rng = rand::thread_rng();

    // quick closure to get a random wall tile, avoiding staircases right next
    // to each other (since that can look weird)
    let mut time_since_staircase = 0;
    let mut wall_index = || {
        if time_since_staircase > 3 && rng.gen_bool(0.075) {
            time_since_staircase = 0;
            if rng.gen_bool(0.5) { 7 } else { 8 }
        } else {
            time_since_staircase += 1;
            if rng.gen_bool(0.6) { 1 } else { rng.gen_range(2..=4) }
        }
    };

    for y in 1..(map.len() - 1) {
        for x in 0..(map[y].len() - 1) {
            if (map[y][x] != (0,0)) ^ (map[y][x+1] == (0,0)) { continue; }
            let dir = if map[y][x] == (0,0) { 1.0 } else { -1.0 };

            let mut tile_x = wall_index();

            if map[y][x] == (0,0) { // literal corner cases. hah.
                if map[y+1][x+1] == (0,0) { tile_x = 0; }
                if map[y-1][x+1] == (0,0) { tile_x = 5; }
            } else {
                if map[y-1][x] == (0,0) { tile_x = 0; }
                if map[y+1][x] == (0,0) { tile_x = 5; }
            }

            let (x, y) = (x as f32 - map[y].len() as f32 / 2.0, y as f32 - map.len() as f32 / 2.0);

            for i in [0,1] { // add bottom and top piece
                let atlas = TextureAtlas {
                    layout: assets.layout.clone(),
                    index: (tile_x + (5 - i) * 30) as usize,
                };
                
                commands.spawn(Sprite3d {
                        image: assets.image.clone(),
                        pixels_per_metre: 16.,
                        double_sided: false,
                        transform: Transform::from_xyz(x+0.5, i as f32 + 0.499, y)
                            .with_rotation(Quat::from_rotation_y(
                                dir * std::f32::consts::PI / 2.0)),
                        ..default()
                }.bundle_with_atlas(&mut sprite_params, atlas));
            }
        }
    }

    // same thing again, but for the vertical walls
    for x in 1..(map[0].len() - 1) {
        for y in 0..(map.len() - 1) {
            if (map[y][x] != (0,0)) ^ (map[y+1][x] == (0,0)) { continue; }
            let dir = if map[y][x] == (0,0) { 1.0 } else { -1.0 };

            let mut tile_x = wall_index();

            if map[y][x] == (0,0) {
                if map[y+1][x-1] == (0,0) { tile_x = 0; }
                if map[y+1][x+1] == (0,0) { tile_x = 5; }
            } else {
                if map[y][x+1] == (0,0) { tile_x = 0; }
                if map[y][x-1] == (0,0) { tile_x = 5; }
            }

            let (x, y) = (x as f32 - map[y].len() as f32 / 2.0, y as f32 - map.len() as f32 / 2.0);

            for i in [0,1]{ // add bottom and top piece
                let atlas = TextureAtlas {
                    layout: assets.layout.clone(),
                    index: (tile_x + (5 - i) * 30) as usize,
                };

                commands.spawn(Sprite3d {
                        image: assets.image.clone(),
                        pixels_per_metre: 16.,
                        double_sided: false,
                        transform: Transform::from_xyz(x, i as f32 + 0.499, y + 0.5)
                            .with_rotation(Quat::from_rotation_y(
                                    (dir - 1.0) * std::f32::consts::PI / 2.0)),
                        ..default()
                }.bundle_with_atlas(&mut sprite_params, atlas));
            }
        }
    }
}
