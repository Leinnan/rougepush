use bevy::prelude::*;
use bevy_sprite3d::{Sprite3d, Sprite3dParams};
use bevy_third_person_camera::controller::*;
use rand::prelude::SliceRandom; // optional if you want movement controls

use crate::{DelayedStart, FaceCamera, ImageAssets, MyStates};

#[derive(Component, Reflect, Default, PartialEq, Eq, PartialOrd, Ord, Clone)]
pub enum TileType {
    #[default]
    None,
    BaseFloor,
    Pit,
}

#[derive(Resource, Reflect, Default)]
pub struct CurrentMap(pub Vec<Vec<TileType>>);

pub struct WorldGenPlugin;

impl Plugin for WorldGenPlugin {
    fn build(&self, app: &mut App) {
        app.register_type::<TileType>().add_systems(
            Update,
            (generate_world, create_map).run_if(in_state(MyStates::Next)),
        );
    }
}

fn create_map(mut commands: Commands, time: Res<Time>, mut q: Query<(&mut DelayedStart, Entity)>) {
    let Ok((mut timer, entity)) = q.get_single_mut() else {
        return;
    };
    timer.0.tick(time.delta());
    if !timer.0.finished() {
        return;
    }
    commands.entity(entity).despawn();
    info!("Start world generate");

    // in reality, you'd probably want to import a map generated by an
    // external tool, or maybe proc-gen it yourself. For this example, a
    // 2d array should suffice.
    #[rustfmt::skip] // irony - we do it to make it more readable 
    let mut map = vec![
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,  TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor ],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor  ],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor  ],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor  ],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor  ],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor  ],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,  TileType::BaseFloor, TileType::BaseFloor,  TileType::BaseFloor, TileType::BaseFloor,  TileType::BaseFloor,   TileType::BaseFloor ],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::None, TileType::None],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::None, TileType::None],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor, TileType::BaseFloor, TileType::BaseFloor,  TileType::BaseFloor, TileType::BaseFloor,  TileType::None],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::None],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::None],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::None],
        vec![TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::None],
        vec![TileType::BaseFloor,  TileType::BaseFloor,    TileType::BaseFloor, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::None],
        vec![TileType::BaseFloor,   TileType::BaseFloor,  TileType::BaseFloor,  TileType::BaseFloor,  TileType::BaseFloor,  TileType::BaseFloor, TileType::BaseFloor,TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::None],
        vec![TileType::BaseFloor,  TileType::BaseFloor,    TileType::BaseFloor, TileType::None, TileType::None, TileType::None, TileType::BaseFloor,  TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,   TileType::BaseFloor,  TileType::None],
    ];

    // add padding to the map
    map.insert(0, vec![TileType::None; map[0].len()]);
    map.push(vec![TileType::None; map[0].len()]);
    for row in map.iter_mut() {
        row.insert(0, TileType::None);
        row.push(TileType::None);
    }

    commands.insert_resource(CurrentMap(map));
}

fn generate_world(
    mut commands: Commands,
    assets: Res<ImageAssets>,
    mut sprite_params: Sprite3dParams,
    map: Option<Res<CurrentMap>>,
) {
    let Some(map) = map else {
        return;
    };
    if !map.is_added() {
        return;
    }
    let map = &map.0;
    // random floor tile
    let options_f = [685, 734, 774, 775, 830, 831];
    let f = || *options_f.choose(&mut rand::thread_rng()).unwrap();

    // add zero padding to the map
    // map.insert(0, vec![0; map[0].len()]);
    // map.push(vec![0; map[0].len()]);
    // for row in map.iter_mut() {
    //     row.insert(0, 0);
    //     row.push(0);
    // }

    // might be nice to add built-in support for sprite-merging for tilemaps...
    // though since all the meshes and materials are already cached and reused,
    // I wonder how much of a speedup that'd actually be. Food for thought.

    info!("World generate- floors");
    for y in 0..map.len() {
        for x in 0..map[y].len() {
            let index = &map[y][x];
            let (x, y) = (
                x as f32 - map[y].len() as f32 / 2.0,
                y as f32 - map.len() as f32 / 2.0,
            );
            if index == &TileType::None {
                continue;
            }

            let atlas = TextureAtlas {
                layout: assets.layout.clone(),
                index: f(),
            };

            commands
                .spawn(
                    Sprite3d {
                        image: assets.image.clone(),
                        pixels_per_metre: 16.,
                        double_sided: false,
                        transform: Transform::from_xyz(x, 0.0, y)
                            .with_rotation(Quat::from_rotation_x(-std::f32::consts::PI / 2.0)),
                        ..default()
                    }
                    .bundle_with_atlas(&mut sprite_params, atlas),
                )
                .insert(Name::new(format!("{}x{}", x, y)));
        }
    }
    let atlas_player = TextureAtlas {
        layout: assets.layout.clone(),
        index: 26,
    };

    // Player
    commands.spawn((
        Sprite3d {
            image: assets.image_transparent.clone(),
            pixels_per_metre: 16.,
            double_sided: true,
            transform: Transform::from_xyz(2.0, 0.5, 5.0),
            ..default()
        }
        .bundle_with_atlas(&mut sprite_params, atlas_player),
        bevy_third_person_camera::ThirdPersonCameraTarget,
        ThirdPersonController::default(), // optional if you want movement controls
        Name::new("Player"),
        FaceCamera,
    ));

    // --------------------------- add some walls -------------------------

    // first horizontally, then vertically, scan along the map. If we find
    // a point transitioning from (0) to something else, add a wall there.

    info!("World generate- walls");
    for y in 1..(map.len() - 1) {
        for x in 0..(map[y].len() - 1) {
            if (map[y][x] != TileType::None) ^ (map[y][x + 1] == TileType::None) {
                continue;
            }
            let dir = if map[y][x] == TileType::None {
                1.0
            } else {
                -1.0
            };

            let (x, y) = (
                x as f32 - map[y].len() as f32 / 2.0,
                y as f32 - map.len() as f32 / 2.0,
            );

            for i in [0, 1] {
                // add bottom and top piece
                let atlas = TextureAtlas {
                    layout: assets.layout.clone(),
                    index: 843,
                };

                commands.spawn(
                    Sprite3d {
                        image: assets.image.clone(),
                        pixels_per_metre: 16.,
                        double_sided: false,
                        transform: Transform::from_xyz(x + 0.5, i as f32 + 0.499, y)
                            .with_rotation(Quat::from_rotation_y(dir * std::f32::consts::PI / 2.0)),
                        ..default()
                    }
                    .bundle_with_atlas(&mut sprite_params, atlas),
                );
            }
        }
    }

    // same thing again, but for the vertical walls
    for x in 1..(map[0].len() - 1) {
        for y in 0..(map.len() - 1) {
            if (map[y][x] != TileType::None) ^ (map[y + 1][x] == TileType::None) {
                continue;
            }
            let dir = if map[y][x] == TileType::None {
                1.0
            } else {
                -1.0
            };

            let (x, y) = (
                x as f32 - map[y].len() as f32 / 2.0,
                y as f32 - map.len() as f32 / 2.0,
            );

            for i in [0, 1] {
                // add bottom and top piece
                let atlas = TextureAtlas {
                    layout: assets.layout.clone(),
                    index: 843,
                };

                commands.spawn(
                    Sprite3d {
                        image: assets.image.clone(),
                        pixels_per_metre: 16.,
                        double_sided: false,
                        transform: Transform::from_xyz(x, i as f32 + 0.499, y + 0.5).with_rotation(
                            Quat::from_rotation_y((dir - 1.0) * std::f32::consts::PI / 2.0),
                        ),
                        ..default()
                    }
                    .bundle_with_atlas(&mut sprite_params, atlas),
                );
            }
        }
    }
    info!("World generate- completed");
}
